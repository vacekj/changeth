// Generated by @wagmi/cli@1.1.0 on 6/5/2023 at 11:53:40 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonT3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonT3ABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonT6
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonT6ABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[5]', type: 'uint256[5]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DeployFoo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployFooABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreABI = [
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'externalNullifier',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'nullifierHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'signal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'identityCommitments',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'trustedVcIssuer', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      {
        name: 'merkleTreeRootDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreVotingABI = [
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__CallerIsNotThePollCoordinator',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__PollHasAlreadyBeenStarted' },
  { type: 'error', inputs: [], name: 'Semaphore__PollIsNotOngoing' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PollCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'decryptionKey',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PollEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'encryptionKey',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PollStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'vote',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addVoter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vote', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'coordinator', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPoll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'decryptionKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'endPoll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'encryptionKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startPoll',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreWhistleblowing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreWhistleblowingABI = [
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheEditor' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entityId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'editor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EntityCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entityId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leak',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LeakPublished',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addWhistleblower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'editor', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createEntity',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'leak', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'publishLeak',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeWhistleblower',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pairing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairingABI = [
  { type: 'error', inputs: [], name: 'Semaphore__InvalidProof' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P1',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P2',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G2Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'addition',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'negate',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G2Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
    name: 'pairingCheck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 's', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'scalar_mul',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PetitionManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const petitionManagerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'semaphoreAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NewUser',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'petitionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PetitionCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'petitionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newSignatureCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PetitionSigned',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'metadata', internalType: 'string', type: 'string' },
    ],
    name: 'createPetition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'petitionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getGroupIdsForPetition',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'array', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isInArray',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'joinGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'petitions',
    outputs: [{ name: 'metadata', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'semaphore',
    outputs: [
      { name: '', internalType: 'contract ISemaphore', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'petitionId', internalType: 'uint256', type: 'uint256' },
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'sign',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'signatureCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'users',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_verifier',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'externalNullifier',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'nullifierHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'signal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'identityCommitments',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'trustedVcIssuer', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'groups',
    outputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'trustedVcIssuer', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [
      {
        name: '',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreWhistleblowing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreWhistleblowingABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_verifier',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheEditor' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entityId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'editor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EntityCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entityId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leak',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LeakPublished',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addWhistleblower',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'editor', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createEntity',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'leak', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'publishLeak',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'entityId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeWhistleblower',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [
      {
        name: '',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreVotingABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_verifier',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__CallerIsNotThePollCoordinator',
  },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__PollHasAlreadyBeenStarted' },
  { type: 'error', inputs: [], name: 'Semaphore__PollIsNotOngoing' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PollCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'decryptionKey',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PollEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'coordinator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'encryptionKey',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PollStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pollId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'vote',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addVoter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vote', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'castVote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'coordinator', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPoll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'decryptionKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'endPoll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pollId', internalType: 'uint256', type: 'uint256' },
      { name: 'encryptionKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startPoll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [
      {
        name: '',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__.
 */
export function usePoseidonT3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT3ABI,
    ...config,
  } as UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonT3Poseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT3ABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT6ABI}__.
 */
export function usePoseidonT6Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonT6ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT6ABI,
    ...config,
  } as UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT6ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonT6Poseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonT6ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT6ABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployFooABI}__.
 */
export function useDeployFooRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof deployFooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployFooABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: deployFooABI,
    ...config,
  } as UseContractReadConfig<typeof deployFooABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployFooABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useDeployFooIsScript<
  TFunctionName extends 'IS_SCRIPT',
  TSelectData = ReadContractResult<typeof deployFooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployFooABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployFooABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof deployFooABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployFooABI}__.
 */
export function useDeployFooWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof deployFooABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof deployFooABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof deployFooABI, TFunctionName, TMode>({
    abi: deployFooABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployFooABI}__ and `functionName` set to `"run"`.
 */
export function useDeployFooRun<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof deployFooABI,
          'run'
        >['request']['abi'],
        'run',
        TMode
      > & { functionName?: 'run' }
    : UseContractWriteConfig<typeof deployFooABI, 'run', TMode> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<typeof deployFooABI, 'run', TMode>({
    abi: deployFooABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployFooABI}__ and `functionName` set to `"setUp"`.
 */
export function useDeployFooSetUp<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof deployFooABI,
          'setUp'
        >['request']['abi'],
        'setUp',
        TMode
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<typeof deployFooABI, 'setUp', TMode> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<typeof deployFooABI, 'setUp', TMode>({
    abi: deployFooABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployFooABI}__.
 */
export function usePrepareDeployFooWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployFooABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployFooABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployFooABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployFooABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareDeployFooRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployFooABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployFooABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployFooABI, 'run'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployFooABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareDeployFooSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployFooABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployFooABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployFooABI, 'setUp'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSemaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, TFunctionName, TMode>({
    abi: iSemaphoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useISemaphoreAddMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'addMember'
        >['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useISemaphoreAddMembers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'addMembers'
        >['request']['abi'],
        'addMembers',
        TMode
      > & { functionName?: 'addMembers' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMembers', TMode>({
    abi: iSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useISemaphoreCreateGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'createGroup'
        >['request']['abi'],
        'createGroup',
        TMode
      > & { functionName?: 'createGroup' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'createGroup', TMode>({
    abi: iSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useISemaphoreRemoveMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'removeMember'
        >['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'removeMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useISemaphoreUpdateGroupAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateGroupAdmin'
        >['request']['abi'],
        'updateGroupAdmin',
        TMode
      > & { functionName?: 'updateGroupAdmin' }
    : UseContractWriteConfig<
        typeof iSemaphoreABI,
        'updateGroupAdmin',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateGroupAdmin', TMode>({
    abi: iSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useISemaphoreUpdateGroupMerkleTreeDuration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateGroupMerkleTreeDuration'
        >['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<
        typeof iSemaphoreABI,
        'updateGroupMerkleTreeDuration',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreABI,
    'updateGroupMerkleTreeDuration',
    TMode
  >({
    abi: iSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useISemaphoreUpdateMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateMember'
        >['request']['abi'],
        'updateMember',
        TMode
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifyProof<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'verifyProof'
        >['request']['abi'],
        'verifyProof',
        TMode
      > & { functionName?: 'verifyProof' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'verifyProof', TMode>({
    abi: iSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function usePrepareISemaphoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareISemaphoreAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareISemaphoreAddMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareISemaphoreCreateGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'createGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'createGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareISemaphoreRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareISemaphoreUpdateGroupAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareISemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreABI,
      'updateGroupMerkleTreeDuration'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareISemaphoreUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareISemaphoreVerifyProof(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'verifyProof'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'verifyProof'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useISemaphoreGroupAdminUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, 'GroupAdminUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'GroupAdminUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, 'GroupAdminUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useISemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iSemaphoreABI,
      'GroupMerkleTreeDurationUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'GroupMerkleTreeDurationUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iSemaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useISemaphoreProofVerifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, 'ProofVerified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'ProofVerified',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, 'ProofVerified'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useISemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useISemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useISemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useISemaphoreGroupsGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useISemaphoreGroupsMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useISemaphoreGroupsMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useISemaphoreGroupsMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__.
 */
export function useISemaphoreVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreVerifierABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreVerifierABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__.
 */
export function useISemaphoreVotingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSemaphoreVotingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, TFunctionName, TMode>({
    abi: iSemaphoreVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"addVoter"`.
 */
export function useISemaphoreVotingAddVoter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          'addVoter'
        >['request']['abi'],
        'addVoter',
        TMode
      > & { functionName?: 'addVoter' }
    : UseContractWriteConfig<typeof iSemaphoreVotingABI, 'addVoter', TMode> & {
        abi?: never
        functionName?: 'addVoter'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, 'addVoter', TMode>({
    abi: iSemaphoreVotingABI,
    functionName: 'addVoter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"castVote"`.
 */
export function useISemaphoreVotingCastVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          'castVote'
        >['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof iSemaphoreVotingABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, 'castVote', TMode>({
    abi: iSemaphoreVotingABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"createPoll"`.
 */
export function useISemaphoreVotingCreatePoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          'createPoll'
        >['request']['abi'],
        'createPoll',
        TMode
      > & { functionName?: 'createPoll' }
    : UseContractWriteConfig<
        typeof iSemaphoreVotingABI,
        'createPoll',
        TMode
      > & {
        abi?: never
        functionName?: 'createPoll'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, 'createPoll', TMode>({
    abi: iSemaphoreVotingABI,
    functionName: 'createPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"endPoll"`.
 */
export function useISemaphoreVotingEndPoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          'endPoll'
        >['request']['abi'],
        'endPoll',
        TMode
      > & { functionName?: 'endPoll' }
    : UseContractWriteConfig<typeof iSemaphoreVotingABI, 'endPoll', TMode> & {
        abi?: never
        functionName?: 'endPoll'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, 'endPoll', TMode>({
    abi: iSemaphoreVotingABI,
    functionName: 'endPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"startPoll"`.
 */
export function useISemaphoreVotingStartPoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreVotingABI,
          'startPoll'
        >['request']['abi'],
        'startPoll',
        TMode
      > & { functionName?: 'startPoll' }
    : UseContractWriteConfig<typeof iSemaphoreVotingABI, 'startPoll', TMode> & {
        abi?: never
        functionName?: 'startPoll'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreVotingABI, 'startPoll', TMode>({
    abi: iSemaphoreVotingABI,
    functionName: 'startPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__.
 */
export function usePrepareISemaphoreVotingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"addVoter"`.
 */
export function usePrepareISemaphoreVotingAddVoter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'addVoter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    functionName: 'addVoter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'addVoter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareISemaphoreVotingCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"createPoll"`.
 */
export function usePrepareISemaphoreVotingCreatePoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'createPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    functionName: 'createPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'createPoll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"endPoll"`.
 */
export function usePrepareISemaphoreVotingEndPoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'endPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    functionName: 'endPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'endPoll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `functionName` set to `"startPoll"`.
 */
export function usePrepareISemaphoreVotingStartPoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'startPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreVotingABI,
    functionName: 'startPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreVotingABI, 'startPoll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreVotingABI}__.
 */
export function useISemaphoreVotingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreVotingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreVotingABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreVotingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `eventName` set to `"PollCreated"`.
 */
export function useISemaphoreVotingPollCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreVotingABI,
    eventName: 'PollCreated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `eventName` set to `"PollEnded"`.
 */
export function useISemaphoreVotingPollEndedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollEnded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreVotingABI,
    eventName: 'PollEnded',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollEnded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `eventName` set to `"PollStarted"`.
 */
export function useISemaphoreVotingPollStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollStarted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreVotingABI,
    eventName: 'PollStarted',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreVotingABI, 'PollStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreVotingABI}__ and `eventName` set to `"VoteAdded"`.
 */
export function useISemaphoreVotingVoteAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreVotingABI, 'VoteAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreVotingABI,
    eventName: 'VoteAdded',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreVotingABI, 'VoteAdded'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__.
 */
export function useISemaphoreWhistleblowingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreWhistleblowingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSemaphoreWhistleblowingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreWhistleblowingABI,
    TFunctionName,
    TMode
  >({ abi: iSemaphoreWhistleblowingABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"addWhistleblower"`.
 */
export function useISemaphoreWhistleblowingAddWhistleblower<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreWhistleblowingABI,
          'addWhistleblower'
        >['request']['abi'],
        'addWhistleblower',
        TMode
      > & { functionName?: 'addWhistleblower' }
    : UseContractWriteConfig<
        typeof iSemaphoreWhistleblowingABI,
        'addWhistleblower',
        TMode
      > & {
        abi?: never
        functionName?: 'addWhistleblower'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreWhistleblowingABI,
    'addWhistleblower',
    TMode
  >({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'addWhistleblower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"createEntity"`.
 */
export function useISemaphoreWhistleblowingCreateEntity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreWhistleblowingABI,
          'createEntity'
        >['request']['abi'],
        'createEntity',
        TMode
      > & { functionName?: 'createEntity' }
    : UseContractWriteConfig<
        typeof iSemaphoreWhistleblowingABI,
        'createEntity',
        TMode
      > & {
        abi?: never
        functionName?: 'createEntity'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreWhistleblowingABI,
    'createEntity',
    TMode
  >({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'createEntity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"publishLeak"`.
 */
export function useISemaphoreWhistleblowingPublishLeak<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreWhistleblowingABI,
          'publishLeak'
        >['request']['abi'],
        'publishLeak',
        TMode
      > & { functionName?: 'publishLeak' }
    : UseContractWriteConfig<
        typeof iSemaphoreWhistleblowingABI,
        'publishLeak',
        TMode
      > & {
        abi?: never
        functionName?: 'publishLeak'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreWhistleblowingABI,
    'publishLeak',
    TMode
  >({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'publishLeak',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"removeWhistleblower"`.
 */
export function useISemaphoreWhistleblowingRemoveWhistleblower<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreWhistleblowingABI,
          'removeWhistleblower'
        >['request']['abi'],
        'removeWhistleblower',
        TMode
      > & { functionName?: 'removeWhistleblower' }
    : UseContractWriteConfig<
        typeof iSemaphoreWhistleblowingABI,
        'removeWhistleblower',
        TMode
      > & {
        abi?: never
        functionName?: 'removeWhistleblower'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreWhistleblowingABI,
    'removeWhistleblower',
    TMode
  >({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'removeWhistleblower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__.
 */
export function usePrepareISemaphoreWhistleblowingWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreWhistleblowingABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreWhistleblowingABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreWhistleblowingABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"addWhistleblower"`.
 */
export function usePrepareISemaphoreWhistleblowingAddWhistleblower(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreWhistleblowingABI,
      'addWhistleblower'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'addWhistleblower',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreWhistleblowingABI,
    'addWhistleblower'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"createEntity"`.
 */
export function usePrepareISemaphoreWhistleblowingCreateEntity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreWhistleblowingABI,
      'createEntity'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'createEntity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreWhistleblowingABI,
    'createEntity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"publishLeak"`.
 */
export function usePrepareISemaphoreWhistleblowingPublishLeak(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreWhistleblowingABI,
      'publishLeak'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'publishLeak',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreWhistleblowingABI,
    'publishLeak'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `functionName` set to `"removeWhistleblower"`.
 */
export function usePrepareISemaphoreWhistleblowingRemoveWhistleblower(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreWhistleblowingABI,
      'removeWhistleblower'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreWhistleblowingABI,
    functionName: 'removeWhistleblower',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreWhistleblowingABI,
    'removeWhistleblower'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__.
 */
export function useISemaphoreWhistleblowingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreWhistleblowingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreWhistleblowingABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreWhistleblowingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `eventName` set to `"EntityCreated"`.
 */
export function useISemaphoreWhistleblowingEntityCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreWhistleblowingABI, 'EntityCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreWhistleblowingABI,
    eventName: 'EntityCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSemaphoreWhistleblowingABI,
    'EntityCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreWhistleblowingABI}__ and `eventName` set to `"LeakPublished"`.
 */
export function useISemaphoreWhistleblowingLeakPublishedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreWhistleblowingABI, 'LeakPublished'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreWhistleblowingABI,
    eventName: 'LeakPublished',
    ...config,
  } as UseContractEventConfig<
    typeof iSemaphoreWhistleblowingABI,
    'LeakPublished'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__.
 */
export function usePairingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P1"`.
 */
export function usePairingP1<
  TFunctionName extends 'P1',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'P1',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P2"`.
 */
export function usePairingP2<
  TFunctionName extends 'P2',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'P2',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"addition"`.
 */
export function usePairingAddition<
  TFunctionName extends 'addition',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'addition',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"negate"`.
 */
export function usePairingNegate<
  TFunctionName extends 'negate',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'negate',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"pairingCheck"`.
 */
export function usePairingPairingCheck<
  TFunctionName extends 'pairingCheck',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'pairingCheck',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"scalar_mul"`.
 */
export function usePairingScalarMul<
  TFunctionName extends 'scalar_mul',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'scalar_mul',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__.
 */
export function usePetitionManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"getGroupIdsForPetition"`.
 */
export function usePetitionManagerGetGroupIdsForPetition<
  TFunctionName extends 'getGroupIdsForPetition',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'getGroupIdsForPetition',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"isInArray"`.
 */
export function usePetitionManagerIsInArray<
  TFunctionName extends 'isInArray',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'isInArray',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"petitions"`.
 */
export function usePetitionManagerPetitions<
  TFunctionName extends 'petitions',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'petitions',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"semaphore"`.
 */
export function usePetitionManagerSemaphore<
  TFunctionName extends 'semaphore',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'semaphore',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"signatureCount"`.
 */
export function usePetitionManagerSignatureCount<
  TFunctionName extends 'signatureCount',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'signatureCount',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"users"`.
 */
export function usePetitionManagerUsers<
  TFunctionName extends 'users',
  TSelectData = ReadContractResult<typeof petitionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof petitionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: petitionManagerABI,
    functionName: 'users',
    ...config,
  } as UseContractReadConfig<
    typeof petitionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link petitionManagerABI}__.
 */
export function usePetitionManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof petitionManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof petitionManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof petitionManagerABI, TFunctionName, TMode>({
    abi: petitionManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"createPetition"`.
 */
export function usePetitionManagerCreatePetition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof petitionManagerABI,
          'createPetition'
        >['request']['abi'],
        'createPetition',
        TMode
      > & { functionName?: 'createPetition' }
    : UseContractWriteConfig<
        typeof petitionManagerABI,
        'createPetition',
        TMode
      > & {
        abi?: never
        functionName?: 'createPetition'
      } = {} as any,
) {
  return useContractWrite<typeof petitionManagerABI, 'createPetition', TMode>({
    abi: petitionManagerABI,
    functionName: 'createPetition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"joinGroup"`.
 */
export function usePetitionManagerJoinGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof petitionManagerABI,
          'joinGroup'
        >['request']['abi'],
        'joinGroup',
        TMode
      > & { functionName?: 'joinGroup' }
    : UseContractWriteConfig<typeof petitionManagerABI, 'joinGroup', TMode> & {
        abi?: never
        functionName?: 'joinGroup'
      } = {} as any,
) {
  return useContractWrite<typeof petitionManagerABI, 'joinGroup', TMode>({
    abi: petitionManagerABI,
    functionName: 'joinGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"sign"`.
 */
export function usePetitionManagerSign<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof petitionManagerABI,
          'sign'
        >['request']['abi'],
        'sign',
        TMode
      > & { functionName?: 'sign' }
    : UseContractWriteConfig<typeof petitionManagerABI, 'sign', TMode> & {
        abi?: never
        functionName?: 'sign'
      } = {} as any,
) {
  return useContractWrite<typeof petitionManagerABI, 'sign', TMode>({
    abi: petitionManagerABI,
    functionName: 'sign',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link petitionManagerABI}__.
 */
export function usePreparePetitionManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof petitionManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: petitionManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof petitionManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"createPetition"`.
 */
export function usePreparePetitionManagerCreatePetition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof petitionManagerABI, 'createPetition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: petitionManagerABI,
    functionName: 'createPetition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof petitionManagerABI,
    'createPetition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"joinGroup"`.
 */
export function usePreparePetitionManagerJoinGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof petitionManagerABI, 'joinGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: petitionManagerABI,
    functionName: 'joinGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof petitionManagerABI, 'joinGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link petitionManagerABI}__ and `functionName` set to `"sign"`.
 */
export function usePreparePetitionManagerSign(
  config: Omit<
    UsePrepareContractWriteConfig<typeof petitionManagerABI, 'sign'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: petitionManagerABI,
    functionName: 'sign',
    ...config,
  } as UsePrepareContractWriteConfig<typeof petitionManagerABI, 'sign'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link petitionManagerABI}__.
 */
export function usePetitionManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof petitionManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: petitionManagerABI,
    ...config,
  } as UseContractEventConfig<typeof petitionManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link petitionManagerABI}__ and `eventName` set to `"NewUser"`.
 */
export function usePetitionManagerNewUserEvent(
  config: Omit<
    UseContractEventConfig<typeof petitionManagerABI, 'NewUser'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: petitionManagerABI,
    eventName: 'NewUser',
    ...config,
  } as UseContractEventConfig<typeof petitionManagerABI, 'NewUser'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link petitionManagerABI}__ and `eventName` set to `"PetitionCreated"`.
 */
export function usePetitionManagerPetitionCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof petitionManagerABI, 'PetitionCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: petitionManagerABI,
    eventName: 'PetitionCreated',
    ...config,
  } as UseContractEventConfig<typeof petitionManagerABI, 'PetitionCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link petitionManagerABI}__ and `eventName` set to `"PetitionSigned"`.
 */
export function usePetitionManagerPetitionSignedEvent(
  config: Omit<
    UseContractEventConfig<typeof petitionManagerABI, 'PetitionSigned'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: petitionManagerABI,
    eventName: 'PetitionSigned',
    ...config,
  } as UseContractEventConfig<typeof petitionManagerABI, 'PetitionSigned'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"groups"`.
 */
export function useSemaphoreGroups<
  TFunctionName extends 'groups',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'groups',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"owner"`.
 */
export function useSemaphoreOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifier"`.
 */
export function useSemaphoreVerifier<
  TFunctionName extends 'verifier',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'verifier',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof semaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, TFunctionName, TMode>({
    abi: semaphoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useSemaphoreAddMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'addMember'
        >['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'addMember', TMode>({
    abi: semaphoreABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useSemaphoreAddMembers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'addMembers'
        >['request']['abi'],
        'addMembers',
        TMode
      > & { functionName?: 'addMembers' }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'addMembers', TMode>({
    abi: semaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useSemaphoreCreateGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'createGroup'
        >['request']['abi'],
        'createGroup',
        TMode
      > & { functionName?: 'createGroup' }
    : UseContractWriteConfig<typeof semaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'createGroup', TMode>({
    abi: semaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useSemaphoreRemoveMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'removeMember'
        >['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'removeMember', TMode>({
    abi: semaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSemaphoreRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof semaphoreABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'renounceOwnership', TMode>({
    abi: semaphoreABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSemaphoreTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof semaphoreABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'transferOwnership', TMode>({
    abi: semaphoreABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useSemaphoreUpdateGroupAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateGroupAdmin'
        >['request']['abi'],
        'updateGroupAdmin',
        TMode
      > & { functionName?: 'updateGroupAdmin' }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin', TMode> & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'updateGroupAdmin', TMode>({
    abi: semaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useSemaphoreUpdateGroupMerkleTreeDuration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateGroupMerkleTreeDuration'
        >['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<
        typeof semaphoreABI,
        'updateGroupMerkleTreeDuration',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreABI,
    'updateGroupMerkleTreeDuration',
    TMode
  >({
    abi: semaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useSemaphoreUpdateMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateMember'
        >['request']['abi'],
        'updateMember',
        TMode
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'updateMember', TMode>({
    abi: semaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifyProof<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'verifyProof'
        >['request']['abi'],
        'verifyProof',
        TMode
      > & { functionName?: 'verifyProof' }
    : UseContractWriteConfig<typeof semaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'verifyProof', TMode>({
    abi: semaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function usePrepareSemaphoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareSemaphoreAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareSemaphoreAddMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareSemaphoreCreateGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'createGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'createGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareSemaphoreRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSemaphoreRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSemaphoreTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareSemaphoreUpdateGroupAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareSemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreABI,
      'updateGroupMerkleTreeDuration'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareSemaphoreUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareSemaphoreVerifyProof(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'verifyProof'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'verifyProof'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useSemaphoreGroupAdminUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'GroupAdminUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupAdminUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'GroupAdminUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useSemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof semaphoreABI,
      'GroupMerkleTreeDurationUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupMerkleTreeDurationUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSemaphoreOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useSemaphoreProofVerifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'ProofVerified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'ProofVerified',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'ProofVerified'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupsGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreGroupsMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreGroupsMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreGroupsMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__.
 */
export function useSemaphoreVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVerifierABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVerifierABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__.
 */
export function useSemaphoreWhistleblowingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreWhistleblowingABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreWhistleblowingGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreWhistleblowingABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreWhistleblowingGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreWhistleblowingABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreWhistleblowingGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreWhistleblowingABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"verifier"`.
 */
export function useSemaphoreWhistleblowingVerifier<
  TFunctionName extends 'verifier',
  TSelectData = ReadContractResult<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreWhistleblowingABI,
    functionName: 'verifier',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__.
 */
export function useSemaphoreWhistleblowingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreWhistleblowingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof semaphoreWhistleblowingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreWhistleblowingABI,
    TFunctionName,
    TMode
  >({ abi: semaphoreWhistleblowingABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"addWhistleblower"`.
 */
export function useSemaphoreWhistleblowingAddWhistleblower<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreWhistleblowingABI,
          'addWhistleblower'
        >['request']['abi'],
        'addWhistleblower',
        TMode
      > & { functionName?: 'addWhistleblower' }
    : UseContractWriteConfig<
        typeof semaphoreWhistleblowingABI,
        'addWhistleblower',
        TMode
      > & {
        abi?: never
        functionName?: 'addWhistleblower'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreWhistleblowingABI,
    'addWhistleblower',
    TMode
  >({
    abi: semaphoreWhistleblowingABI,
    functionName: 'addWhistleblower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"createEntity"`.
 */
export function useSemaphoreWhistleblowingCreateEntity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreWhistleblowingABI,
          'createEntity'
        >['request']['abi'],
        'createEntity',
        TMode
      > & { functionName?: 'createEntity' }
    : UseContractWriteConfig<
        typeof semaphoreWhistleblowingABI,
        'createEntity',
        TMode
      > & {
        abi?: never
        functionName?: 'createEntity'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreWhistleblowingABI,
    'createEntity',
    TMode
  >({
    abi: semaphoreWhistleblowingABI,
    functionName: 'createEntity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"publishLeak"`.
 */
export function useSemaphoreWhistleblowingPublishLeak<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreWhistleblowingABI,
          'publishLeak'
        >['request']['abi'],
        'publishLeak',
        TMode
      > & { functionName?: 'publishLeak' }
    : UseContractWriteConfig<
        typeof semaphoreWhistleblowingABI,
        'publishLeak',
        TMode
      > & {
        abi?: never
        functionName?: 'publishLeak'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreWhistleblowingABI,
    'publishLeak',
    TMode
  >({
    abi: semaphoreWhistleblowingABI,
    functionName: 'publishLeak',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"removeWhistleblower"`.
 */
export function useSemaphoreWhistleblowingRemoveWhistleblower<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreWhistleblowingABI,
          'removeWhistleblower'
        >['request']['abi'],
        'removeWhistleblower',
        TMode
      > & { functionName?: 'removeWhistleblower' }
    : UseContractWriteConfig<
        typeof semaphoreWhistleblowingABI,
        'removeWhistleblower',
        TMode
      > & {
        abi?: never
        functionName?: 'removeWhistleblower'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreWhistleblowingABI,
    'removeWhistleblower',
    TMode
  >({
    abi: semaphoreWhistleblowingABI,
    functionName: 'removeWhistleblower',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__.
 */
export function usePrepareSemaphoreWhistleblowingWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreWhistleblowingABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreWhistleblowingABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreWhistleblowingABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"addWhistleblower"`.
 */
export function usePrepareSemaphoreWhistleblowingAddWhistleblower(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreWhistleblowingABI,
      'addWhistleblower'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreWhistleblowingABI,
    functionName: 'addWhistleblower',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreWhistleblowingABI,
    'addWhistleblower'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"createEntity"`.
 */
export function usePrepareSemaphoreWhistleblowingCreateEntity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreWhistleblowingABI,
      'createEntity'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreWhistleblowingABI,
    functionName: 'createEntity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreWhistleblowingABI,
    'createEntity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"publishLeak"`.
 */
export function usePrepareSemaphoreWhistleblowingPublishLeak(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreWhistleblowingABI,
      'publishLeak'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreWhistleblowingABI,
    functionName: 'publishLeak',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreWhistleblowingABI,
    'publishLeak'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `functionName` set to `"removeWhistleblower"`.
 */
export function usePrepareSemaphoreWhistleblowingRemoveWhistleblower(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreWhistleblowingABI,
      'removeWhistleblower'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreWhistleblowingABI,
    functionName: 'removeWhistleblower',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreWhistleblowingABI,
    'removeWhistleblower'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__.
 */
export function useSemaphoreWhistleblowingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreWhistleblowingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"EntityCreated"`.
 */
export function useSemaphoreWhistleblowingEntityCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'EntityCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'EntityCreated',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreWhistleblowingABI,
    'EntityCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreWhistleblowingGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreWhistleblowingABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"LeakPublished"`.
 */
export function useSemaphoreWhistleblowingLeakPublishedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'LeakPublished'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'LeakPublished',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreWhistleblowingABI,
    'LeakPublished'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreWhistleblowingMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreWhistleblowingMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreWhistleblowingABI,
    'MemberRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreWhistleblowingABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreWhistleblowingMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreWhistleblowingABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreWhistleblowingABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreWhistleblowingABI,
    'MemberUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVotingABI}__.
 */
export function useSemaphoreVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVotingABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreVotingGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVotingABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreVotingGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVotingABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreVotingGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVotingABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"verifier"`.
 */
export function useSemaphoreVotingVerifier<
  TFunctionName extends 'verifier',
  TSelectData = ReadContractResult<typeof semaphoreVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVotingABI,
    functionName: 'verifier',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__.
 */
export function useSemaphoreVotingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof semaphoreVotingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, TFunctionName, TMode>({
    abi: semaphoreVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"addVoter"`.
 */
export function useSemaphoreVotingAddVoter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          'addVoter'
        >['request']['abi'],
        'addVoter',
        TMode
      > & { functionName?: 'addVoter' }
    : UseContractWriteConfig<typeof semaphoreVotingABI, 'addVoter', TMode> & {
        abi?: never
        functionName?: 'addVoter'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, 'addVoter', TMode>({
    abi: semaphoreVotingABI,
    functionName: 'addVoter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"castVote"`.
 */
export function useSemaphoreVotingCastVote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          'castVote'
        >['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof semaphoreVotingABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, 'castVote', TMode>({
    abi: semaphoreVotingABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"createPoll"`.
 */
export function useSemaphoreVotingCreatePoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          'createPoll'
        >['request']['abi'],
        'createPoll',
        TMode
      > & { functionName?: 'createPoll' }
    : UseContractWriteConfig<typeof semaphoreVotingABI, 'createPoll', TMode> & {
        abi?: never
        functionName?: 'createPoll'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, 'createPoll', TMode>({
    abi: semaphoreVotingABI,
    functionName: 'createPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"endPoll"`.
 */
export function useSemaphoreVotingEndPoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          'endPoll'
        >['request']['abi'],
        'endPoll',
        TMode
      > & { functionName?: 'endPoll' }
    : UseContractWriteConfig<typeof semaphoreVotingABI, 'endPoll', TMode> & {
        abi?: never
        functionName?: 'endPoll'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, 'endPoll', TMode>({
    abi: semaphoreVotingABI,
    functionName: 'endPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"startPoll"`.
 */
export function useSemaphoreVotingStartPoll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreVotingABI,
          'startPoll'
        >['request']['abi'],
        'startPoll',
        TMode
      > & { functionName?: 'startPoll' }
    : UseContractWriteConfig<typeof semaphoreVotingABI, 'startPoll', TMode> & {
        abi?: never
        functionName?: 'startPoll'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreVotingABI, 'startPoll', TMode>({
    abi: semaphoreVotingABI,
    functionName: 'startPoll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__.
 */
export function usePrepareSemaphoreVotingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"addVoter"`.
 */
export function usePrepareSemaphoreVotingAddVoter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'addVoter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    functionName: 'addVoter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'addVoter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareSemaphoreVotingCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"createPoll"`.
 */
export function usePrepareSemaphoreVotingCreatePoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'createPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    functionName: 'createPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'createPoll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"endPoll"`.
 */
export function usePrepareSemaphoreVotingEndPoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'endPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    functionName: 'endPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'endPoll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreVotingABI}__ and `functionName` set to `"startPoll"`.
 */
export function usePrepareSemaphoreVotingStartPoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'startPoll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreVotingABI,
    functionName: 'startPoll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreVotingABI, 'startPoll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__.
 */
export function useSemaphoreVotingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreVotingGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreVotingMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreVotingMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreVotingMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"PollCreated"`.
 */
export function useSemaphoreVotingPollCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'PollCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'PollCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'PollCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"PollEnded"`.
 */
export function useSemaphoreVotingPollEndedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'PollEnded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'PollEnded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'PollEnded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"PollStarted"`.
 */
export function useSemaphoreVotingPollStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'PollStarted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'PollStarted',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'PollStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreVotingABI}__ and `eventName` set to `"VoteAdded"`.
 */
export function useSemaphoreVotingVoteAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreVotingABI, 'VoteAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreVotingABI,
    eventName: 'VoteAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreVotingABI, 'VoteAdded'>)
}
